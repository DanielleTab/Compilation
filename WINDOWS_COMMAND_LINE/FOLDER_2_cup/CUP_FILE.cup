/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;

parser code 
{:
	public Lexer lexer;

	public CUP_FILECup(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */ 
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	System.out.print(s.sym);
	System.out.print("(");
	if (s.value != null)
	{
		System.out.print(s.value);
	}
	System.out.print(")");
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal COMMA;
terminal DOT;
terminal ELSE;
terminal FALSE;
terminal EQUAL;
terminal EXTENDS;
terminal CONTINUE;
terminal GT;
terminal GTE;
terminal IF;
terminal LAND;
terminal LBRACK;
terminal LBRACE;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MOD;
terminal NEQUAL;
terminal NULL;
terminal RBRACK;
terminal RBRACE;
terminal RETURN;
terminal SEMICOLON;
terminal STATIC;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;
terminal COMMENT;
terminal INT;
terminal STRING;

/*************/
/* TERMINALS */
/*************/
terminal Integer INTEGER;
terminal String ID,CLASS_ID,QUOTE;
terminal UMINUS;


non terminal AST_PROGRAM program;
non terminal AST_CLASS_DECLARATION_LIST classDeclList;
non terminal AST_CLASS_DECLARATION classDecl; 
non terminal AST_FIELD_OR_METHOD_LIST fieldOrMethodList;
non terminal AST_FIELD field;
non terminal AST_ID_LIST idList;
non terminal AST_METHOD method;
non terminal AST_FORMALS_LIST formalsList;
non terminal AST_TYPE type;
non terminal AST_CALL call;
non terminal AST_EXPS_LIST expsList;

non terminal AST_EXP exp;
non terminal AST_LOCATION location;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_BINOP binop;
non terminal AST_LITERAL literal;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
/* array index [] */
/* method call () */
precedence left LPAREN,LBRACK;

precedence left DOT;
precedence right UMINUS, LNEG;
precedence left TIMES, DIVIDE, MOD;
precedence left PLUS, MINUS;
precedence left LT, LTE, GT, GTE;
precedence left EQUAL, NEQUAL;
precedence left LAND;
precedence left LOR;
precedence right ASSIGN;


/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program		::=		classDeclList:l 		{: RESULT = new AST_PROGRAM(l); :}
					;

classDeclList	::= /* epsilon rule */					{: RESULT = new AST_CLASS_DECLARATION_LIST(null,null); :} 
					| classDeclList:l classDecl:cd 		{: RESULT = new AST_CLASS_DECLARATION_LIST(cd, l); :}
					;
					
classDecl	::=		CLASS CLASS_ID:className LBRACE fieldOrMethodList:l RBRACE {: RESULT = new AST_CLASS_DECLARATION(className,null,l); :}
					| CLASS CLASS_ID:className EXTENDS CLASS_ID:extendsClassName LBRACE fieldOrMethodList:l RBRACE {: RESULT = new AST_CLASS_DECLARATION(className,extendsClassName,l); :}
					;
					
fieldOrMethodList ::= /* epsilon rule */				{: RESULT = new AST_FIELD_OR_METHOD_LIST(null, null); 	:}
					  | fieldOrMethodList:l field:f     {: RESULT = new AST_FIELD_OR_METHOD_LIST(f, l); 		:}
					  | fieldOrMethodList:l method:m    {: RESULT = new AST_FIELD_OR_METHOD_LIST(m, l); 		:}
					  ;
					  
field 	 	::=		type:t ID:fieldName idList:l SEMICOLON  {: RESULT = new AST_FIELD(t, fieldName, l); :}
					;
					
idList		::=		/* epsilon rule */					{: RESULT = new AST_ID_LIST(null,null); :}
					| idList:l COMMA ID:idName			{: RESULT = new AST_ID_LIST(idName, l); :}
					; 

method		::=     type:t ID:methodName LPAREN formalsList:f RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_METHOD(t,methodName,f,body); :}
					| VOID ID:methodName LPAREN formalsList:f RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_METHOD(null,methodName,f,body); :} // t=null for void
					| type:t ID:methodName LPAREN RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_METHOD(t,methodName,null,body); :} 
					| VOID ID:methodName LPAREN RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_METHOD(null,methodName,null,body); :} // t=null for void
					;

formalsList	::=     type:t ID:formalName				{: RESULT = new AST_FORMALS_LIST(t,formalName,null); :}
					| type:t ID:formalName COMMA formalsList:l {: RESULT = new AST_FORMALS_LIST(t,formalName,l); :}
					;

type        ::=		INT									{: RESULT = new AST_TYPE_INT(); 			:}								
					| STRING							{: RESULT = new AST_TYPE_STRING(); 			:}
					| CLASS_ID:className				{: RESULT = new AST_TYPE_CLASS(className); 	:}
					| type:t LBRACK RBRACK				{: RESULT = new AST_TYPE_ARRAY(t);			:}
					;
					
stmtList	::=		/* epsilon rule */					{: RESULT = new AST_STMT_LIST(null, null); :}
					| stmtList:l stmt:s					{: RESULT = new AST_STMT_LIST(s,l); :}
					;
					
stmt		::=		location:l ASSIGN exp:e SEMICOLON			{: RESULT = new AST_STMT_ASSIGN(l,e); 				:}
					| call:c SEMICOLON							{: RESULT = new AST_STMT_CALL(c); 					:}
					| RETURN SEMICOLON							{: RESULT = new AST_STMT_RETURN(null); /* no return value */ 				:}
					| RETURN exp:e SEMICOLON					{: RESULT = new AST_STMT_RETURN(e); 				:}
					| IF    LPAREN exp:cond RPAREN stmt:body 	{: RESULT = new AST_STMT_IF(cond, body); 			:}
					| WHILE LPAREN exp:cond RPAREN stmt:body	{: RESULT = new AST_STMT_WHILE(cond, body); 		:}
					| LBRACE stmtList:l RBRACE					{: RESULT = new AST_STMT_STMT_LIST(l); 				:}
					| type:t ID:id SEMICOLON					{: RESULT = new AST_STMT_VAR_DECL(t, id);:}
					| type:t ID:id ASSIGN exp:e SEMICOLON		{: RESULT = new AST_STMT_VAR_DECL(t, id, e);	:}
					;
					
exp			::=		location:l 									{: RESULT = new AST_EXP_LOCATION(l);				:}
					| call:c     								{: RESULT = new AST_EXP_CALL(c);          		:}
					| NEW CLASS_ID:className LPAREN RPAREN		{: RESULT = new AST_EXP_NEW_CLASS(className);		:}
					| NEW type:t LBRACK exp:e RBRACK			{: RESULT = new AST_EXP_NEW_ARRAY(t,e);		:}
					| exp:e1 binop:p exp:e2						{: RESULT = new AST_EXP_BINOP(e1, e2, p);	:}
					| literal:l									{: RESULT = new AST_EXP_LITERAL(l);				:}
					| LPAREN exp:e RPAREN						{: RESULT = new AST_EXP_LPRP(e);			:}
					;

										
location	::=		ID:name								{: RESULT = new AST_LOCATION_SIMPLE(name);       :}
					| exp:e DOT ID:fieldName		{: RESULT = new AST_LOCATION_FIELD(e,fieldName); :} 
					| exp:e1 LBRACK exp:e2 RBRACK	{: RESULT = new AST_LOCATION_SUBSCRIPT(e1,e2);     :} 
					; 


call 		::=		ID:funcName LPAREN RPAREN							{: RESULT = new AST_CALL(null, funcName, null);	:}
					| exp:e DOT ID:funcName LPAREN RPAREN				{: RESULT = new AST_CALL(e, funcName, null);	:}
					| ID:funcName LPAREN expsList:args RPAREN			{: RESULT = new AST_CALL(null, funcName, args);	:}
					| exp:e DOT ID:funcName LPAREN expsList:args RPAREN {: RESULT = new AST_CALL(e, funcName, args); 	:}
					;
					
expsList	::=		exp:e								{: RESULT = new AST_EXPS_LIST(e, null); :}
					| expsList:l COMMA exp:e			{: RESULT = new AST_EXPS_LIST(e, l);	:}
					;

binop		::=		PLUS		{: RESULT = new AST_BINOP_PLUS();	:}
					| MINUS		{: RESULT = new AST_BINOP_MINUS();	:}
					| TIMES		{: RESULT = new AST_BINOP_TIMES();	:}
					| DIVIDE	{: RESULT = new AST_BINOP_DIVIDE();	:}
					| LT		{: RESULT = new AST_BINOP_LT();		:}
					| LTE		{: RESULT = new AST_BINOP_LTE();	:}
					| GT		{: RESULT = new AST_BINOP_GT();		:}
					| GTE		{: RESULT = new AST_BINOP_GTE();	:}
					| EQUAL		{: RESULT = new AST_BINOP_EQUAL();	:}
					| NEQUAL	{: RESULT = new AST_BINOP_NEQUAL();	:}
					;
					
literal		::=		INTEGER:i					{: RESULT = new AST_LITERAL_INTEGER(i);		:}
					| QUOTE:s					{: RESULT = new AST_LITERAL_QUOTE(s);		:}
					| NULL						{: RESULT = new AST_LITERAL_NULL();			:}
					;
					
